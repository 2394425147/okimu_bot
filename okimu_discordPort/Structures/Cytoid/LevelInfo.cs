// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using okimu_discordPort.Apis.CytoidApi.LevelInfo;
//
//    var levelInfo = LevelInfo.FromJson(jsonString);

using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using okimu_discordPort.Structures.Cytoid;
using okimu_discordPort.Structures.JsonConverters;

namespace okimu_discordPort.Apis.CytoidApi.LevelInfo
{
    public partial class LevelInfo
    {
        [JsonProperty("statusCode", NullValueHandling = NullValueHandling.Ignore)]
        public long? StatusCode { get; set; }

        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public string Message { get; set; }
    }

    public partial class LevelInfo
    {
        [JsonProperty("id")] public long Id { get; set; }

        [JsonProperty("version")] public long Version { get; set; }

        [JsonProperty("uid")] public string Uid { get; set; }

        [JsonProperty("title")] public string Title { get; set; }

        [JsonProperty("metadata")] public Metadata Metadata { get; set; }

        [JsonProperty("duration")] public double Duration { get; set; }

        [JsonProperty("size")] public long Size { get; set; }

        [JsonProperty("description")] public string Description { get; set; }

        [JsonProperty("censored")] public object Censored { get; set; }

        [JsonProperty("tags")] public List<string> Tags { get; set; }

        [JsonProperty("category")] public List<object> Category { get; set; }

        [JsonProperty("ownerId")] public Guid OwnerId { get; set; }

        [JsonProperty("creationDate")] public DateTimeOffset CreationDate { get; set; }

        [JsonProperty("modificationDate")] public DateTimeOffset ModificationDate { get; set; }

        [JsonProperty("charts")] public List<Chart> Charts { get; set; }

        [JsonProperty("owner")] public Owner Owner { get; set; }

        [JsonProperty("state")] public string State { get; set; }

        [JsonProperty("cover")] public Cover Cover { get; set; }

        [JsonProperty("music")] public Uri Music { get; set; }

        [JsonProperty("musicPreview")] public Uri MusicPreview { get; set; }
    }

    public partial class Chart
    {
        [JsonProperty("id")] public long Id { get; set; }

        [JsonProperty("name")] public string Name { get; set; }

        [JsonProperty("type"), JsonConverter(typeof(DifficultyTypeConverter))] public DifficultyType Type { get; set; }

        [JsonProperty("difficulty")] public long Difficulty { get; set; }

        [JsonProperty("notesCount")] public long NotesCount { get; set; }

        public string GetName()
        {
            if (!string.IsNullOrEmpty(Name))
                return Name;
            
            return Type switch
            {
                DifficultyType.Easy    => "Easy",
                DifficultyType.Hard    => "Hard",
                DifficultyType.Extreme => "EX",
                _                      => throw new ArgumentOutOfRangeException(nameof(Type))
            };
        }
    }

    public partial class Cover
    {
        [JsonProperty("original")] public Uri Original { get; set; }

        [JsonProperty("thumbnail")] public Uri Thumbnail { get; set; }

        [JsonProperty("cover")] public Uri CoverCover { get; set; }

        [JsonProperty("stripe")] public Uri Stripe { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("title")] public string Title { get; set; }

        [JsonProperty("artist")] public Artist Artist { get; set; }

        [JsonProperty("charter")] public Charter Charter { get; set; }

        [JsonProperty("illustrator")] public Artist Illustrator { get; set; }
    }

    public partial class Artist
    {
        [JsonProperty("url")] public Uri Url { get; set; }

        [JsonProperty("name")] public string Name { get; set; }
    }

    public partial class Charter
    {
        [JsonProperty("name")] public string Name { get; set; }
    }

    public partial class Owner
    {
        [JsonProperty("id")] public Guid Id { get; set; }

        [JsonProperty("uid")] public string Uid { get; set; }

        [JsonProperty("name")] public string Name { get; set; }

        [JsonProperty("role")] public string Role { get; set; }

        [JsonProperty("active")] public bool Active { get; set; }

        [JsonProperty("avatar")] public Avatar Avatar { get; set; }
    }

    public partial class Avatar
    {
        [JsonProperty("original")] public Uri Original { get; set; }

        [JsonProperty("small")] public Uri Small { get; set; }

        [JsonProperty("medium")] public Uri Medium { get; set; }

        [JsonProperty("large")] public Uri Large { get; set; }
    }

    public partial class LevelInfo
    {
        public static LevelInfo FromJson(string json) =>
            JsonConvert.DeserializeObject<LevelInfo>(json,
                Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LevelInfo self) =>
            JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            }
        };
    }
}
