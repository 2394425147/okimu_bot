// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using okimu_discordPort.Apis.CytoidApi.ProfileInfo;
//
//    var profileInfo = ProfileInfo.FromJson(jsonString);

using System;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace okimu_discordPort.Apis.CytoidApi.ProfileInfo
{
    public partial class ProfileInfo
    {
        [JsonProperty("user")]
        public User User { get; set; }

        [JsonProperty("exp")]
        public Exp Exp { get; set; }

        [JsonProperty("rating")]
        public string Rating { get; set; }

        [JsonProperty("grade")]
        public Grade Grade { get; set; }

        [JsonProperty("activities")]
        public Activities Activities { get; set; }
    }

    public partial class Activities
    {
        [JsonProperty("totalRankedPlays")]
        public long TotalRankedPlays { get; set; }

        [JsonProperty("clearedNotes")]
        public long ClearedNotes { get; set; }

        [JsonProperty("maxCombo")]
        public long MaxCombo { get; set; }

        [JsonProperty("averageRankedAccuracy")]
        public double AverageRankedAccuracy { get; set; }

        [JsonProperty("totalRankedScore")]
        public long TotalRankedScore { get; set; }

        [JsonProperty("totalPlayTime")]
        public double TotalPlayTime { get; set; }
    }

    public partial class Exp
    {
        [JsonProperty("basicExp")]
        public long BasicExp { get; set; }

        [JsonProperty("levelExp")]
        public long LevelExp { get; set; }

        [JsonProperty("totalExp")]
        public long TotalExp { get; set; }

        [JsonProperty("currentLevel")]
        public long CurrentLevel { get; set; }

        [JsonProperty("nextLevelExp")]
        public long NextLevelExp { get; set; }

        [JsonProperty("currentLevelExp")]
        public long CurrentLevelExp { get; set; }
    }

    public partial class Grade
    {
        [JsonProperty("A")]
        public long A { get; set; }

        [JsonProperty("B")]
        public long B { get; set; }

        [JsonProperty("C")]
        public long C { get; set; }

        [JsonProperty("D")]
        public long D { get; set; }

        [JsonProperty("F")]
        public long F { get; set; }

        [JsonProperty("MAX")]
        public long Max { get; set; }

        [JsonProperty("S")]
        public long S { get; set; }

        [JsonProperty("SS")]
        public long Ss { get; set; }

        [JsonProperty("SSS")]
        public long Sss { get; set; }
    }

    public partial class User
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("uid")]
        public string Uid { get; set; }

        [JsonProperty("name")]
        public object Name { get; set; }

        [JsonProperty("role")]
        public string Role { get; set; }

        [JsonProperty("active")]
        public bool Active { get; set; }

        [JsonProperty("avatar")]
        public Avatar Avatar { get; set; }
    }

    public partial class Avatar
    {
        [JsonProperty("original")]
        public Uri Original { get; set; }

        [JsonProperty("small")]
        public Uri Small { get; set; }

        [JsonProperty("medium")]
        public Uri Medium { get; set; }

        [JsonProperty("large")]
        public Uri Large { get; set; }
    }

    public partial class ProfileInfo
    {
        public static ProfileInfo FromJson(string json) => JsonConvert.DeserializeObject<ProfileInfo>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ProfileInfo self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
