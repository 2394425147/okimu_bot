// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using okimu_discordPort.Apis.CytoidApi.ProfileDetails;
//
//    var profileDetails = ProfileDetails.FromJson(jsonString);

using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using okimu_discordPort.Structures.Cytoid;
using okimu_discordPort.Structures.JsonConverters;

namespace okimu_discordPort.Apis.CytoidApi.ProfileDetails
{
    public partial class ProfileDetails
    {
        [JsonProperty("user")] public User User { get; set; }

        [JsonProperty("badges")] public List<Badge> Badges { get; set; }

        [JsonProperty("grade")] public Grade Grade { get; set; }

        [JsonProperty("activities")] public Activities Activities { get; set; }

        [JsonProperty("exp")] public ProfileDetailsExp Exp { get; set; }

        [JsonProperty("rating")] public string Rating { get; set; }

        [JsonProperty("timeSeries")] public List<TimeSery> TimeSeries { get; set; }

        [JsonProperty("lastActive")] public DateTimeOffset? LastActive { get; set; }

        [JsonProperty("levelCount")] public long LevelCount { get; set; }

        [JsonProperty("levels")] public List<LevelElement> Levels { get; set; }

        [JsonProperty("featuredLevelCount")] public long FeaturedLevelCount { get; set; }

        [JsonProperty("featuredLevels")] public List<object> FeaturedLevels { get; set; }

        [JsonProperty("tier")] public Tier Tier { get; set; }

        [JsonProperty("collections")] public List<Collection> Collections { get; set; }

        [JsonProperty("collectionCount")] public long CollectionCount { get; set; }

        [JsonProperty("character")] public Character Character { get; set; }

        [JsonProperty("recentRecords")] public List<RecentRecord> RecentRecords { get; set; }
    }

    public partial class Activities
    {
        [JsonProperty("totalRankedPlays")] public long TotalRankedPlays { get; set; }

        [JsonProperty("clearedNotes")] public long ClearedNotes { get; set; }

        [JsonProperty("maxCombo")] public long MaxCombo { get; set; }

        [JsonProperty("averageRankedAccuracy")]
        public double AverageRankedAccuracy { get; set; }

        [JsonProperty("totalRankedScore")] public long TotalRankedScore { get; set; }

        [JsonProperty("totalPlayTime")] public double TotalPlayTime { get; set; }
    }

    public partial class Badge
    {
        [JsonProperty("title")] public string Title { get; set; }

        [JsonProperty("description")] public string Description { get; set; }

        [JsonProperty("_id")] public string Id { get; set; }

        [JsonProperty("uid")] public string Uid { get; set; }

        [JsonProperty("listed")] public bool Listed { get; set; }

        [JsonProperty("metadata")] public BadgeMetadata Metadata { get; set; }

        [JsonProperty("type")] public BadgeType Type { get; set; }

        [JsonProperty("id")] public string BadgeId { get; set; }

        [JsonProperty("date")] public DateTimeOffset Date { get; set; }
    }

    public partial class BadgeMetadata
    {
        [JsonProperty("fontawesome", NullValueHandling = NullValueHandling.Ignore)]
        public Fontawesome Fontawesome { get; set; }

        [JsonProperty("announcement", NullValueHandling = NullValueHandling.Ignore)]
        public string Announcement { get; set; }

        [JsonProperty("imageUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ImageUrl { get; set; }

        [JsonProperty("overrides", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Overrides { get; set; }
    }

    public partial class Fontawesome
    {
        [JsonProperty("icon")] public string Icon { get; set; }

        [JsonProperty("pack")] public Pack Pack { get; set; }

        [JsonProperty("class", NullValueHandling = NullValueHandling.Ignore)]
        public string Class { get; set; }
    }

    public partial class Character
    {
        [JsonProperty("illustrator")] public Illustrator Illustrator { get; set; }

        [JsonProperty("name")] public string Name { get; set; }

        [JsonProperty("description")] public string Description { get; set; }

        [JsonProperty("_id")] public string Id { get; set; }

        [JsonProperty("levelId")] public long LevelId { get; set; }

        [JsonProperty("asset")] public string Asset { get; set; }

        [JsonProperty("variantName")] public object VariantName { get; set; }

        [JsonProperty("id")] public string CharacterId { get; set; }

        [JsonProperty("exp")] public CharacterExp Exp { get; set; }
    }

    public partial class CharacterExp
    {
        [JsonProperty("totalExp")] public long TotalExp { get; set; }

        [JsonProperty("currentLevel")] public long CurrentLevel { get; set; }

        [JsonProperty("nextLevelExp")] public long NextLevelExp { get; set; }

        [JsonProperty("currentLevelExp")] public long CurrentLevelExp { get; set; }
    }

    public partial class Illustrator
    {
        [JsonProperty("name")] public string Name { get; set; }

        [JsonProperty("url")] public Uri Url { get; set; }
    }

    public partial class Collection
    {
        [JsonProperty("metadata")] public CollectionMetadata Metadata { get; set; }

        [JsonProperty("title")] public string Title { get; set; }

        [JsonProperty("slogan")] public string Slogan { get; set; }

        [JsonProperty("description")] public string Description { get; set; }

        [JsonProperty("tags")] public List<string> Tags { get; set; }

        [JsonProperty("state")] public string State { get; set; }

        [JsonProperty("uid")] public string Uid { get; set; }

        [JsonProperty("creationDate")] public DateTimeOffset CreationDate { get; set; }

        [JsonProperty("modificationDate")] public DateTimeOffset ModificationDate { get; set; }

        [JsonProperty("__v")] public long V { get; set; }

        [JsonProperty("cover")] public CollectionCover Cover { get; set; }

        [JsonProperty("id")] public string Id { get; set; }
    }

    public partial class CollectionCover
    {
        [JsonProperty("original")] public Uri Original { get; set; }

        [JsonProperty("thumbnail")] public Uri Thumbnail { get; set; }

        [JsonProperty("cover")] public Uri Cover { get; set; }

        [JsonProperty("stripe")] public Uri Stripe { get; set; }
    }

    public partial class CollectionMetadata
    {
        [JsonProperty("cover")] public MetadataCover Cover { get; set; }
    }

    public partial class MetadataCover
    {
        [JsonProperty("name")] public object Name { get; set; }

        [JsonProperty("localized_name")] public object LocalizedName { get; set; }

        [JsonProperty("url")] public Uri Url { get; set; }
    }

    public partial class ProfileDetailsExp
    {
        [JsonProperty("basicExp")] public long BasicExp { get; set; }

        [JsonProperty("levelExp")] public long LevelExp { get; set; }

        [JsonProperty("totalExp")] public long TotalExp { get; set; }

        [JsonProperty("currentLevel")] public long CurrentLevel { get; set; }

        [JsonProperty("nextLevelExp")] public long NextLevelExp { get; set; }

        [JsonProperty("currentLevelExp")] public long CurrentLevelExp { get; set; }
    }

    public partial class Grade
    {
        [JsonProperty("A")] public long A { get; set; }

        [JsonProperty("B")] public long B { get; set; }

        [JsonProperty("C")] public long C { get; set; }

        [JsonProperty("D")] public long D { get; set; }

        [JsonProperty("F")] public long F { get; set; }

        [JsonProperty("MAX")] public long Max { get; set; }

        [JsonProperty("S")] public long S { get; set; }

        [JsonProperty("SS")] public long Ss { get; set; }

        [JsonProperty("SSS")] public long Sss { get; set; }
    }

    public partial class LevelElement
    {
        [JsonProperty("id")] public long Id { get; set; }

        [JsonProperty("version")] public long Version { get; set; }

        [JsonProperty("uid")] public string Uid { get; set; }

        [JsonProperty("title")] public string Title { get; set; }

        [JsonProperty("metadata")] public LevelMetadata Metadata { get; set; }

        [JsonProperty("creationDate")] public DateTimeOffset CreationDate { get; set; }

        [JsonProperty("modificationDate")] public DateTimeOffset ModificationDate { get; set; }

        [JsonProperty("state")] public string State { get; set; }

        [JsonProperty("cover")] public CollectionCover Cover { get; set; }

        [JsonProperty("music")] public Uri Music { get; set; }

        [JsonProperty("musicPreview")] public Uri MusicPreview { get; set; }

        [JsonProperty("charts")] public List<Chart> Charts { get; set; }
    }

    public partial class Chart
    {
        [JsonProperty("id")] public long Id { get; set; }

        [JsonProperty("difficulty")] public long Difficulty { get; set; }

        [JsonProperty("name")] public string Name { get; set; }

        [JsonProperty("notesCount")] public long NotesCount { get; set; }

        [JsonProperty("type"), JsonConverter(typeof(DifficultyTypeConverter))] public DifficultyType Type { get; set; }

        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public ChartLevel Level { get; set; }
    }

    public partial class ChartLevel
    {
        [JsonProperty("id")] public long Id { get; set; }

        [JsonProperty("uid")] public string Uid { get; set; }

        [JsonProperty("title")] public string Title { get; set; }

        [JsonProperty("state")] public State State { get; set; }

        [JsonProperty("cover")] public CollectionCover Cover { get; set; }

        [JsonProperty("music")] public Uri Music { get; set; }

        [JsonProperty("musicPreview")] public Uri MusicPreview { get; set; }
    }

    public partial class LevelMetadata
    {
        [JsonProperty("title")] public string Title { get; set; }

        [JsonProperty("artist")] public Illustrator Artist { get; set; }

        [JsonProperty("charter")] public Charter Charter { get; set; }

        [JsonProperty("illustrator")] public Illustrator Illustrator { get; set; }

        [JsonProperty("storyboarder", NullValueHandling = NullValueHandling.Ignore)]
        public Charter Storyboarder { get; set; }
    }

    public partial class Charter
    {
        [JsonProperty("name")] public string Name { get; set; }
    }

    public partial class RecentRecord
    {
        [JsonProperty("id")] public long Id { get; set; }

        [JsonProperty("date")] public DateTimeOffset Date { get; set; }

        [JsonProperty("score")] public long Score { get; set; }

        [JsonProperty("accuracy")] public string Accuracy { get; set; }

        [JsonProperty("details")] public Details Details { get; set; }

        [JsonProperty("chart")] public Chart Chart { get; set; }
    }

    public partial class RecentRecord
    {
        public ulong CalculateReward()
        {
            return Convert.ToUInt64(
                Math.Clamp(
                Math.Ceiling(
                Math.Pow(float.Parse(Accuracy), 2) * Math.Min(Chart.Difficulty, 16) * 2
                ), 0, 120));
        }
    }

    public partial class Details
    {
        [JsonProperty("bad")] public long Bad { get; set; }

        [JsonProperty("good")] public long Good { get; set; }

        [JsonProperty("miss")] public long Miss { get; set; }

        [JsonProperty("great")] public long Great { get; set; }

        [JsonProperty("perfect")] public long Perfect { get; set; }

        [JsonProperty("maxCombo")] public long MaxCombo { get; set; }
    }

    public partial class Tier
    {
        [JsonProperty("name")] public string Name { get; set; }

        [JsonProperty("colorPalette")] public ColorPalette ColorPalette { get; set; }
    }

    public partial class ColorPalette
    {
        [JsonProperty("stages")] public List<string> Stages { get; set; }

        [JsonProperty("background")] public string Background { get; set; }
    }

    public partial class TimeSery
    {
        [JsonProperty("date")] public string Date { get; set; }

        [JsonProperty("count")] public long Count { get; set; }

        [JsonProperty("rating")] public double Rating { get; set; }

        [JsonProperty("accuracy")] public double Accuracy { get; set; }

        [JsonProperty("cumulativeRating")] public double CumulativeRating { get; set; }

        [JsonProperty("cumulativeAccuracy")] public double CumulativeAccuracy { get; set; }

        [JsonProperty("year")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Year { get; set; }

        [JsonProperty("week")] public string Week { get; set; }
    }

    public partial class User
    {
        [JsonProperty("id")] public Guid Id { get; set; }

        [JsonProperty("uid")] public string Uid { get; set; }

        [JsonProperty("name")] public object Name { get; set; }

        [JsonProperty("avatar")] public Avatar Avatar { get; set; }
    }

    public partial class Avatar
    {
        [JsonProperty("original")] public Uri Original { get; set; }

        [JsonProperty("small")] public Uri Small { get; set; }

        [JsonProperty("medium")] public Uri Medium { get; set; }

        [JsonProperty("large")] public Uri Large { get; set; }
    }

    public enum Pack
    {
        Fab,
        Fad
    };

    public enum BadgeType
    {
        Achievement,
        Event
    };

    public enum State
    {
        Unlisted
    };

    public partial class ProfileDetails
    {
        public static ProfileDetails FromJson(string json) =>
            JsonConvert.DeserializeObject<ProfileDetails>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ProfileDetails self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                PackConverter.Singleton,
                BadgeTypeConverter.Singleton,
                StateConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            }
        };
    }

    internal class PackConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Pack) || t == typeof(Pack?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "fab":
                    return Pack.Fab;
                case "fad":
                    return Pack.Fad;
            }

            throw new Exception("Cannot unmarshal type Pack");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (Pack)untypedValue;
            switch (value)
            {
                case Pack.Fab:
                    serializer.Serialize(writer, "fab");
                    return;
                case Pack.Fad:
                    serializer.Serialize(writer, "fad");
                    return;
            }

            throw new Exception("Cannot marshal type Pack");
        }

        public static readonly PackConverter Singleton = new PackConverter();
    }

    internal class BadgeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(BadgeType) || t == typeof(BadgeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "achievement":
                    return BadgeType.Achievement;
                case "event":
                    return BadgeType.Event;
            }

            throw new Exception("Cannot unmarshal type BadgeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (BadgeType)untypedValue;
            switch (value)
            {
                case BadgeType.Achievement:
                    serializer.Serialize(writer, "achievement");
                    return;
                case BadgeType.Event:
                    serializer.Serialize(writer, "event");
                    return;
            }

            throw new Exception("Cannot marshal type BadgeType");
        }

        public static readonly BadgeTypeConverter Singleton = new BadgeTypeConverter();
    }

    internal class StateConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(State) || t == typeof(State?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "UNLISTED")
            {
                return State.Unlisted;
            }

            throw new Exception("Cannot unmarshal type State");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (State)untypedValue;
            if (value == State.Unlisted)
            {
                serializer.Serialize(writer, "UNLISTED");
                return;
            }

            throw new Exception("Cannot marshal type State");
        }

        public static readonly StateConverter Singleton = new StateConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }

            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
