// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using okimu_discordPort.Apis.CytoidApi.LevelQuery;
//
//    var levelQuery = LevelQuery.FromJson(jsonString);

namespace okimu_discordPort.Apis.CytoidApi.LevelQuery
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LevelQuery
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("version")]
        public long Version { get; set; }

        [JsonProperty("uid")]
        public string Uid { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        [JsonProperty("duration")]
        public double Duration { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("censored")]
        public object Censored { get; set; }

        [JsonProperty("tags")]
        public List<string> Tags { get; set; }

        [JsonProperty("category")]
        public List<object> Category { get; set; }

        [JsonProperty("creationDate")]
        public DateTimeOffset CreationDate { get; set; }

        [JsonProperty("modificationDate")]
        public DateTimeOffset ModificationDate { get; set; }

        [JsonProperty("owner")]
        public Owner Owner { get; set; }

        [JsonProperty("auxRating")]
        public double? AuxRating { get; set; }

        [JsonProperty("plays")]
        public long Plays { get; set; }

        [JsonProperty("downloads")]
        public long Downloads { get; set; }

        [JsonProperty("charts")]
        public List<Chart> Charts { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("cover")]
        public Cover Cover { get; set; }

        [JsonProperty("music")]
        public Uri Music { get; set; }

        [JsonProperty("musicPreview")]
        public Uri MusicPreview { get; set; }
    }

    public partial class Chart
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("difficulty")]
        public long Difficulty { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("notesCount")]
        public long NotesCount { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Cover
    {
        [JsonProperty("original")]
        public Uri Original { get; set; }

        [JsonProperty("thumbnail")]
        public Uri Thumbnail { get; set; }

        [JsonProperty("cover")]
        public Uri CoverCover { get; set; }

        [JsonProperty("stripe")]
        public Uri Stripe { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("artist")]
        public Artist Artist { get; set; }

        [JsonProperty("charter")]
        public Charter Charter { get; set; }

        [JsonProperty("illustrator")]
        public Illustrator Illustrator { get; set; }

        [JsonProperty("title_localized", NullValueHandling = NullValueHandling.Ignore)]
        public string TitleLocalized { get; set; }

        [JsonProperty("storyboarder", NullValueHandling = NullValueHandling.Ignore)]
        public Charter Storyboarder { get; set; }
    }

    public partial class Artist
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("localized_name", NullValueHandling = NullValueHandling.Ignore)]
        public string LocalizedName { get; set; }
    }

    public partial class Charter
    {
        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Illustrator
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Owner
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("uid")]
        public string Uid { get; set; }

        [JsonProperty("name")]
        public object Name { get; set; }

        [JsonProperty("avatar")]
        public Avatar Avatar { get; set; }
    }

    public partial class Avatar
    {
        [JsonProperty("original")]
        public Uri Original { get; set; }

        [JsonProperty("small")]
        public Uri Small { get; set; }

        [JsonProperty("medium")]
        public Uri Medium { get; set; }

        [JsonProperty("large")]
        public Uri Large { get; set; }
    }

    public partial class LevelQuery
    {
        public static List<LevelQuery> FromJson(string json) => JsonConvert.DeserializeObject<List<LevelQuery>>(json, okimu_discordPort.Apis.CytoidApi.LevelQuery.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<LevelQuery> self) => JsonConvert.SerializeObject(self, okimu_discordPort.Apis.CytoidApi.LevelQuery.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
